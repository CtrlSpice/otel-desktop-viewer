// Code generated by "go.opentelemetry.io/collector/cmd/builder". DO NOT EDIT.

// I have edited the code generated by "go.opentelemetry.io/collector/cmd/builder". Pray I don't edit it any further.

// Program otel-desktop-viewer is an OpenTelemetry Collector binary.
package main

import (
	"log"
	"strconv"

	"github.com/spf13/cobra"
	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/confmap"
	envprovider "go.opentelemetry.io/collector/confmap/provider/envprovider"
	yamlprovider "go.opentelemetry.io/collector/confmap/provider/yamlprovider"
	"go.opentelemetry.io/collector/otelcol"
)

func main() {
	info := component.BuildInfo{
		Command:     "otel-desktop-viewer",
		Description: "Collector distribution that allows developers to visualize their OTel data locally",
		Version:     "2.0.0",
	}

	set := otelcol.CollectorSettings{
		BuildInfo: info,
		Factories: components,
		ConfigProviderSettings: otelcol.ConfigProviderSettings{
			ResolverSettings: confmap.ResolverSettings{
				ProviderFactories: []confmap.ProviderFactory{
					envprovider.NewFactory(),
					yamlprovider.NewFactory(),
				},
			},
		},
	}

	if err := run(set); err != nil {
		log.Fatal(err)
	}
}

func runInteractive(params otelcol.CollectorSettings) error {
	cmd := newCommand(params)
	if err := cmd.Execute(); err != nil {
		log.Fatalf("collector server run finished with error: %v", err)
	}

	return nil
}

func newCommand(set otelcol.CollectorSettings) *cobra.Command {
	var httpPortFlag, grpcPortFlag, browserPortFlag int
	var hostFlag string

	rootCmd := &cobra.Command{
		Use:          set.BuildInfo.Command,
		Version:      set.BuildInfo.Version,
		SilenceUsage: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			set.ConfigProviderSettings.ResolverSettings.URIs = []string{
				`yaml:receivers::otlp::protocols::http::endpoint: ` + hostFlag + `:` + strconv.Itoa(httpPortFlag),
				`yaml:receivers::otlp::protocols::grpc::endpoint: ` + hostFlag + `:` + strconv.Itoa(grpcPortFlag),
				`yaml:exporters::desktop:`,
				`yaml:exporters::desktop::endpoint: ` + hostFlag + `:` + strconv.Itoa(browserPortFlag),
				`yaml:service::pipelines::traces::receivers: [otlp]`,
				`yaml:service::pipelines::traces::exporters: [desktop]`,
				`yaml:service::pipelines::metrics::receivers: [otlp]`,
				`yaml:service::pipelines::metrics::exporters: [desktop]`,
				`yaml:service::pipelines::logs::receivers: [otlp]`,
				`yaml:service::pipelines::logs::exporters: [desktop]`,
			}
			set.ConfigProviderSettings.ResolverSettings.DefaultScheme = "env"
			col, err := otelcol.NewCollector(set)
			if err != nil {
				log.Fatal(err)
			}
			return col.Run(cmd.Context())
		},
	}

	rootCmd.Flags().IntVar(&httpPortFlag, "http", 4318, "The port number on which we listen for OTLP http payloads")
	rootCmd.Flags().IntVar(&grpcPortFlag, "grpc", 4317, "The port number on which we listen for OTLP grpc payloads")
	rootCmd.Flags().IntVar(&browserPortFlag, "browser", 8000, "The port number where we expose our data")
	rootCmd.Flags().StringVar(&hostFlag, "host", "localhost", "The host where we expose our all endpoints (OTLP receivers and browser)")
	return rootCmd
}

